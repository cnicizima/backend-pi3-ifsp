// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  cpf        String  @unique
  nome       String
  email      String  @unique
  sexo       String?
  telefone   String
  nascimento String // PASSAR DO FRONT NO FORMATO DDMMYYYY
  password   String
  isAdmin    Boolean @default(false)
  avatar     String?

  enderecos  Endereco[]
  pedidos    Pedido[]
  avaliacoes Avaliacao[]
  favoritos  Favoritos[]
  mensagens  Mensagem[]
  sessions   Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  client    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Endereco {
  idEndereco  Int     @id @default(autoincrement())
  usuarioCpf  String
  apelido     String
  cep         String
  rua         String
  numero      String
  complemento String?
  cidade      String
  estado      String
  bairro      String

  usuario User @relation(fields: [usuarioCpf], references: [cpf])

  pedidos Pedido[]
}

model Pedido {
  idPedido   Int      @id @default(autoincrement())
  usuarioCpf String
  idEndereco Int
  valorTotal Float
  status     String
  dataCompra DateTime @default(now())
  idCupom    Int?

  usuario   User       @relation(fields: [usuarioCpf], references: [cpf])
  endereco  Endereco   @relation(fields: [idEndereco], references: [idEndereco])
  pagamento Pagamento?
  cupom     Cupom?     @relation(fields: [idCupom], references: [idCupom])

  produtos PedidoProduto[]
}

model Pagamento {
  idPagamento   Int       @id @default(autoincrement())
  idPedido      Int       @unique
  metodo        String
  status        String
  valorPago     Float
  dataPagamento DateTime?

  pedido Pedido @relation(fields: [idPedido], references: [idPedido])
}

model Produto {
  idProduto      Int     @id @default(autoincrement())
  fotoVinho      String?
  nome           String
  descricao      String?
  preco          Float
  classificacao  Float
  categoria      String
  gustativo      String?
  olfativo       String?
  regiao         String?
  amadurecimento String?
  analises       String?
  uvas           String?
  temperatura    String?

  estoque    Estoque?
  avaliacoes Avaliacao[]
  favoritos  Favoritos[]
  pedidos    PedidoProduto[]
}

model Estoque {
  idEstoque  Int @id @default(autoincrement())
  idProduto  Int @unique
  quantidade Int @default(0)

  produto Produto @relation(fields: [idProduto], references: [idProduto])
}

model PedidoProduto {
  idPedidoProduto Int   @id @default(autoincrement())
  idPedido        Int
  idProduto       Int
  quantidade      Int
  valorItem       Float

  pedido  Pedido  @relation(fields: [idPedido], references: [idPedido])
  produto Produto @relation(fields: [idProduto], references: [idProduto])
}

model Favoritos {
  idFavorito Int    @id @default(autoincrement())
  usuarioCpf String
  idProduto  Int

  usuario User    @relation(fields: [usuarioCpf], references: [cpf])
  produto Produto @relation(fields: [idProduto], references: [idProduto])
}

model Avaliacao {
  idAvaliacao Int      @id @default(autoincrement())
  usuarioCpf  String
  idProduto   Int
  avaliacao   Float
  conteudo    String?
  dataCriacao DateTime @default(now())

  usuario User    @relation(fields: [usuarioCpf], references: [cpf])
  produto Produto @relation(fields: [idProduto], references: [idProduto])
}

model Mensagem {
  idMensagem Int      @id @default(autoincrement())
  usuarioCpf String
  assunto    String
  conteudo   String
  dataEnvio  DateTime @default(now())

  usuario User @relation(fields: [usuarioCpf], references: [cpf])
}

model Cupom {
  idCupom  Int      @id @default(autoincrement())
  codigo   String   @unique
  desconto Float
  pedidos  Pedido[]
}
